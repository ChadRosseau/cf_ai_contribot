/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StaticRouteRouteImport } from './routes/_static/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthOnboardingRouteImport } from './routes/_auth/onboarding'
import { Route as StaticDocsIndexRouteImport } from './routes/_static/docs/index'
import { Route as AuthAppIndexRouteImport } from './routes/_auth/app/index'
import { Route as ApiUserPreferencesRouteImport } from './routes/api/user.preferences'
import { Route as ApiUserFavouritesRouteImport } from './routes/api/user.favourites'
import { Route as ApiReposRecommendedRouteImport } from './routes/api/repos.recommended'
import { Route as ApiIssuesRecommendedRouteImport } from './routes/api/issues.recommended'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'
import { Route as ApiAgentSplatRouteImport } from './routes/api/agent.$'
import { Route as StaticDocsNameRouteImport } from './routes/_static/docs/$name'
import { Route as ApiUserFavouritesReposRouteImport } from './routes/api/user.favourites.repos'
import { Route as ApiUserFavouritesIssuesRouteImport } from './routes/api/user.favourites.issues'
import { Route as AuthAppPolarSubscriptionsRouteImport } from './routes/_auth/app/polar/subscriptions'
import { Route as AuthAppPolarPortalRouteImport } from './routes/_auth/app/polar/portal'
import { Route as AuthAppPolarCheckoutSuccessRouteImport } from './routes/_auth/app/polar/checkout.success'

const StaticRouteRoute = StaticRouteRouteImport.update({
  id: '/_static',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthOnboardingRoute = AuthOnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => AuthRouteRoute,
} as any)
const StaticDocsIndexRoute = StaticDocsIndexRouteImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => StaticRouteRoute,
} as any)
const AuthAppIndexRoute = AuthAppIndexRouteImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const ApiUserPreferencesRoute = ApiUserPreferencesRouteImport.update({
  id: '/api/user/preferences',
  path: '/api/user/preferences',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUserFavouritesRoute = ApiUserFavouritesRouteImport.update({
  id: '/api/user/favourites',
  path: '/api/user/favourites',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiReposRecommendedRoute = ApiReposRecommendedRouteImport.update({
  id: '/api/repos/recommended',
  path: '/api/repos/recommended',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiIssuesRecommendedRoute = ApiIssuesRecommendedRouteImport.update({
  id: '/api/issues/recommended',
  path: '/api/issues/recommended',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAgentSplatRoute = ApiAgentSplatRouteImport.update({
  id: '/api/agent/$',
  path: '/api/agent/$',
  getParentRoute: () => rootRouteImport,
} as any)
const StaticDocsNameRoute = StaticDocsNameRouteImport.update({
  id: '/docs/$name',
  path: '/docs/$name',
  getParentRoute: () => StaticRouteRoute,
} as any)
const ApiUserFavouritesReposRoute = ApiUserFavouritesReposRouteImport.update({
  id: '/repos',
  path: '/repos',
  getParentRoute: () => ApiUserFavouritesRoute,
} as any)
const ApiUserFavouritesIssuesRoute = ApiUserFavouritesIssuesRouteImport.update({
  id: '/issues',
  path: '/issues',
  getParentRoute: () => ApiUserFavouritesRoute,
} as any)
const AuthAppPolarSubscriptionsRoute =
  AuthAppPolarSubscriptionsRouteImport.update({
    id: '/app/polar/subscriptions',
    path: '/app/polar/subscriptions',
    getParentRoute: () => AuthRouteRoute,
  } as any)
const AuthAppPolarPortalRoute = AuthAppPolarPortalRouteImport.update({
  id: '/app/polar/portal',
  path: '/app/polar/portal',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthAppPolarCheckoutSuccessRoute =
  AuthAppPolarCheckoutSuccessRouteImport.update({
    id: '/app/polar/checkout/success',
    path: '/app/polar/checkout/success',
    getParentRoute: () => AuthRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/onboarding': typeof AuthOnboardingRoute
  '/docs/$name': typeof StaticDocsNameRoute
  '/api/agent/$': typeof ApiAgentSplatRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/issues/recommended': typeof ApiIssuesRecommendedRoute
  '/api/repos/recommended': typeof ApiReposRecommendedRoute
  '/api/user/favourites': typeof ApiUserFavouritesRouteWithChildren
  '/api/user/preferences': typeof ApiUserPreferencesRoute
  '/app': typeof AuthAppIndexRoute
  '/docs': typeof StaticDocsIndexRoute
  '/app/polar/portal': typeof AuthAppPolarPortalRoute
  '/app/polar/subscriptions': typeof AuthAppPolarSubscriptionsRoute
  '/api/user/favourites/issues': typeof ApiUserFavouritesIssuesRoute
  '/api/user/favourites/repos': typeof ApiUserFavouritesReposRoute
  '/app/polar/checkout/success': typeof AuthAppPolarCheckoutSuccessRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/onboarding': typeof AuthOnboardingRoute
  '/docs/$name': typeof StaticDocsNameRoute
  '/api/agent/$': typeof ApiAgentSplatRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/issues/recommended': typeof ApiIssuesRecommendedRoute
  '/api/repos/recommended': typeof ApiReposRecommendedRoute
  '/api/user/favourites': typeof ApiUserFavouritesRouteWithChildren
  '/api/user/preferences': typeof ApiUserPreferencesRoute
  '/app': typeof AuthAppIndexRoute
  '/docs': typeof StaticDocsIndexRoute
  '/app/polar/portal': typeof AuthAppPolarPortalRoute
  '/app/polar/subscriptions': typeof AuthAppPolarSubscriptionsRoute
  '/api/user/favourites/issues': typeof ApiUserFavouritesIssuesRoute
  '/api/user/favourites/repos': typeof ApiUserFavouritesReposRoute
  '/app/polar/checkout/success': typeof AuthAppPolarCheckoutSuccessRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_static': typeof StaticRouteRouteWithChildren
  '/_auth/onboarding': typeof AuthOnboardingRoute
  '/_static/docs/$name': typeof StaticDocsNameRoute
  '/api/agent/$': typeof ApiAgentSplatRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/issues/recommended': typeof ApiIssuesRecommendedRoute
  '/api/repos/recommended': typeof ApiReposRecommendedRoute
  '/api/user/favourites': typeof ApiUserFavouritesRouteWithChildren
  '/api/user/preferences': typeof ApiUserPreferencesRoute
  '/_auth/app/': typeof AuthAppIndexRoute
  '/_static/docs/': typeof StaticDocsIndexRoute
  '/_auth/app/polar/portal': typeof AuthAppPolarPortalRoute
  '/_auth/app/polar/subscriptions': typeof AuthAppPolarSubscriptionsRoute
  '/api/user/favourites/issues': typeof ApiUserFavouritesIssuesRoute
  '/api/user/favourites/repos': typeof ApiUserFavouritesReposRoute
  '/_auth/app/polar/checkout/success': typeof AuthAppPolarCheckoutSuccessRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/onboarding'
    | '/docs/$name'
    | '/api/agent/$'
    | '/api/auth/$'
    | '/api/issues/recommended'
    | '/api/repos/recommended'
    | '/api/user/favourites'
    | '/api/user/preferences'
    | '/app'
    | '/docs'
    | '/app/polar/portal'
    | '/app/polar/subscriptions'
    | '/api/user/favourites/issues'
    | '/api/user/favourites/repos'
    | '/app/polar/checkout/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/onboarding'
    | '/docs/$name'
    | '/api/agent/$'
    | '/api/auth/$'
    | '/api/issues/recommended'
    | '/api/repos/recommended'
    | '/api/user/favourites'
    | '/api/user/preferences'
    | '/app'
    | '/docs'
    | '/app/polar/portal'
    | '/app/polar/subscriptions'
    | '/api/user/favourites/issues'
    | '/api/user/favourites/repos'
    | '/app/polar/checkout/success'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_static'
    | '/_auth/onboarding'
    | '/_static/docs/$name'
    | '/api/agent/$'
    | '/api/auth/$'
    | '/api/issues/recommended'
    | '/api/repos/recommended'
    | '/api/user/favourites'
    | '/api/user/preferences'
    | '/_auth/app/'
    | '/_static/docs/'
    | '/_auth/app/polar/portal'
    | '/_auth/app/polar/subscriptions'
    | '/api/user/favourites/issues'
    | '/api/user/favourites/repos'
    | '/_auth/app/polar/checkout/success'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  StaticRouteRoute: typeof StaticRouteRouteWithChildren
  ApiAgentSplatRoute: typeof ApiAgentSplatRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiIssuesRecommendedRoute: typeof ApiIssuesRecommendedRoute
  ApiReposRecommendedRoute: typeof ApiReposRecommendedRoute
  ApiUserFavouritesRoute: typeof ApiUserFavouritesRouteWithChildren
  ApiUserPreferencesRoute: typeof ApiUserPreferencesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_static': {
      id: '/_static'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof StaticRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/onboarding': {
      id: '/_auth/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof AuthOnboardingRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_static/docs/': {
      id: '/_static/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof StaticDocsIndexRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_auth/app/': {
      id: '/_auth/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AuthAppIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/api/user/preferences': {
      id: '/api/user/preferences'
      path: '/api/user/preferences'
      fullPath: '/api/user/preferences'
      preLoaderRoute: typeof ApiUserPreferencesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/user/favourites': {
      id: '/api/user/favourites'
      path: '/api/user/favourites'
      fullPath: '/api/user/favourites'
      preLoaderRoute: typeof ApiUserFavouritesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/repos/recommended': {
      id: '/api/repos/recommended'
      path: '/api/repos/recommended'
      fullPath: '/api/repos/recommended'
      preLoaderRoute: typeof ApiReposRecommendedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/issues/recommended': {
      id: '/api/issues/recommended'
      path: '/api/issues/recommended'
      fullPath: '/api/issues/recommended'
      preLoaderRoute: typeof ApiIssuesRecommendedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/agent/$': {
      id: '/api/agent/$'
      path: '/api/agent/$'
      fullPath: '/api/agent/$'
      preLoaderRoute: typeof ApiAgentSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_static/docs/$name': {
      id: '/_static/docs/$name'
      path: '/docs/$name'
      fullPath: '/docs/$name'
      preLoaderRoute: typeof StaticDocsNameRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/api/user/favourites/repos': {
      id: '/api/user/favourites/repos'
      path: '/repos'
      fullPath: '/api/user/favourites/repos'
      preLoaderRoute: typeof ApiUserFavouritesReposRouteImport
      parentRoute: typeof ApiUserFavouritesRoute
    }
    '/api/user/favourites/issues': {
      id: '/api/user/favourites/issues'
      path: '/issues'
      fullPath: '/api/user/favourites/issues'
      preLoaderRoute: typeof ApiUserFavouritesIssuesRouteImport
      parentRoute: typeof ApiUserFavouritesRoute
    }
    '/_auth/app/polar/subscriptions': {
      id: '/_auth/app/polar/subscriptions'
      path: '/app/polar/subscriptions'
      fullPath: '/app/polar/subscriptions'
      preLoaderRoute: typeof AuthAppPolarSubscriptionsRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/app/polar/portal': {
      id: '/_auth/app/polar/portal'
      path: '/app/polar/portal'
      fullPath: '/app/polar/portal'
      preLoaderRoute: typeof AuthAppPolarPortalRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/app/polar/checkout/success': {
      id: '/_auth/app/polar/checkout/success'
      path: '/app/polar/checkout/success'
      fullPath: '/app/polar/checkout/success'
      preLoaderRoute: typeof AuthAppPolarCheckoutSuccessRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthOnboardingRoute: typeof AuthOnboardingRoute
  AuthAppIndexRoute: typeof AuthAppIndexRoute
  AuthAppPolarPortalRoute: typeof AuthAppPolarPortalRoute
  AuthAppPolarSubscriptionsRoute: typeof AuthAppPolarSubscriptionsRoute
  AuthAppPolarCheckoutSuccessRoute: typeof AuthAppPolarCheckoutSuccessRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthOnboardingRoute: AuthOnboardingRoute,
  AuthAppIndexRoute: AuthAppIndexRoute,
  AuthAppPolarPortalRoute: AuthAppPolarPortalRoute,
  AuthAppPolarSubscriptionsRoute: AuthAppPolarSubscriptionsRoute,
  AuthAppPolarCheckoutSuccessRoute: AuthAppPolarCheckoutSuccessRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface StaticRouteRouteChildren {
  StaticDocsNameRoute: typeof StaticDocsNameRoute
  StaticDocsIndexRoute: typeof StaticDocsIndexRoute
}

const StaticRouteRouteChildren: StaticRouteRouteChildren = {
  StaticDocsNameRoute: StaticDocsNameRoute,
  StaticDocsIndexRoute: StaticDocsIndexRoute,
}

const StaticRouteRouteWithChildren = StaticRouteRoute._addFileChildren(
  StaticRouteRouteChildren,
)

interface ApiUserFavouritesRouteChildren {
  ApiUserFavouritesIssuesRoute: typeof ApiUserFavouritesIssuesRoute
  ApiUserFavouritesReposRoute: typeof ApiUserFavouritesReposRoute
}

const ApiUserFavouritesRouteChildren: ApiUserFavouritesRouteChildren = {
  ApiUserFavouritesIssuesRoute: ApiUserFavouritesIssuesRoute,
  ApiUserFavouritesReposRoute: ApiUserFavouritesReposRoute,
}

const ApiUserFavouritesRouteWithChildren =
  ApiUserFavouritesRoute._addFileChildren(ApiUserFavouritesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  StaticRouteRoute: StaticRouteRouteWithChildren,
  ApiAgentSplatRoute: ApiAgentSplatRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiIssuesRecommendedRoute: ApiIssuesRecommendedRoute,
  ApiReposRecommendedRoute: ApiReposRecommendedRoute,
  ApiUserFavouritesRoute: ApiUserFavouritesRouteWithChildren,
  ApiUserPreferencesRoute: ApiUserPreferencesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
